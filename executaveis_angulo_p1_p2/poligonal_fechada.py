import math
import csv
import pandas as pd
import glob
import re
from docx import Document
from docx.shared import Inches
from datetime import datetime
import os
import ezdxf
import time
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from decimal import Decimal, getcontext
import pandas as pd
from docx.shared import Pt
import openpyxl
from openpyxl.styles import Alignment, Font
import logging 

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

getcontext().prec = 28  # Define a precis√£o para 28 casas decimais

# Configura√ß√£o manual para nomes dos meses em portugu√™s (independente do locale)
MESES_PT_BR = {
    'January': 'janeiro',
    'February': 'fevereiro',
    'March': 'mar√ßo',
    'April': 'abril',
    'May': 'maio',
    'June': 'junho',
    'July': 'julho',
    'August': 'agosto',
    'September': 'setembro',
    'October': 'outubro',
    'November': 'novembro',
    'December': 'dezembro'
}


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # Garanta que est√° em DEBUG

def is_clockwise(points):
    """
    Verifica se a poligonal est√° no sentido hor√°rio.
    Retorna True se for hor√°rio, False se anti-hor√°rio.
    """
    area = 0.0
    for i in range(len(points)):
        j = (i + 1) % len(points)
        area += points[i][0] * points[j][1]
        area -= points[j][0] * points[i][1]
    return area < 0

def ensure_counterclockwise(points):
    """
    Garantir que a lista de pontos esteja no sentido anti-hor√°rio.
    Se estiver no sentido hor√°rio, inverte os pontos.
    """
    if is_clockwise(points):
        points.reverse()
    return points


getcontext().prec = 28  # Define a precis√£o para 28 casas decimais

# Configurar locale para portugu√™s do Brasil
#locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')  # Para sistemas Linux ou Mac
# locale.setlocale(locale.LC_TIME, 'Portuguese_Brazil.1252')  # Para Windows, caso necess√°rio

# Obter data atual formatada em portugu√™s
data_atual = datetime.now().strftime("%d de %B de %Y")


# Fun√ß√£o que processa as linhas da poligonal
# Fun√ß√£o que processa as linhas da poligonal
def limpar_dxf_e_converter_r2010(original_path, saida_path):
    """
    L√™ um DXF original e regrava o arquivo com a vers√£o R2010,
    garantindo a preserva√ß√£o de entidades como ARC e CIRCLE.
    N√£o adiciona nenhum ponto ou geometria nova.
    """
    try:
        doc_antigo = ezdxf.readfile(original_path)
        msp_antigo = doc_antigo.modelspace()
        doc_novo = ezdxf.new(dxfversion='R2010')
        msp_novo = doc_novo.modelspace()

        encontrou_polilinha = False

        for entity in msp_antigo.query('LWPOLYLINE'):
            if entity.closed:
                pontos = [point[:2] for point in entity.get_points('xy')]
                msp_novo.add_lwpolyline(
                    pontos,
                    close=True,
                    dxfattribs={'layer': entity.dxf.layer}
                )
                encontrou_polilinha = True
                break

        if not encontrou_polilinha:
            raise ValueError("Nenhuma polilinha fechada encontrada no DXF original.")

        doc_novo.saveas(saida_path)
        logger.info(f"‚úÖ DXF convertido e salvo como R2010 em: {saida_path}")
        return saida_path

    except Exception as e:
        logger.error(f"‚ùå Erro ao converter DXF para R2010: {e}")
        return original_path




def get_document_info_from_dxf(dxf_file_path):
    try:
        doc = ezdxf.readfile(dxf_file_path)  
        msp = doc.modelspace()  

        lines = []
        perimeter_dxf = 0
        area_dxf = 0
        ponto_az = None
        area_poligonal = None

        for entity in msp.query('LWPOLYLINE'):
            if entity.closed:
                points = entity.get_points('xy')  
                num_points = len(points)

                for i in range(num_points - 1):
                    start_point = (points[i][0], points[i][1])
                    end_point = (points[i + 1][0], points[i + 1][1])
                    lines.append((start_point, end_point))

                    segment_length = ((end_point[0] - start_point[0]) ** 2 + 
                                      (end_point[1] - start_point[1]) ** 2) ** 0.5
                    perimeter_dxf += segment_length

                start_point = (points[-1][0], points[-1][1])
                end_point = (points[0][0], points[0][1])
                lines.append((start_point, end_point))

                segment_length = ((end_point[0] - start_point[0]) ** 2 + 
                                  (end_point[1] - start_point[1]) ** 2) ** 0.5
                perimeter_dxf += segment_length

                x = [point[0] for point in points]
                y = [point[1] for point in points]
                area_dxf = abs(sum(x[i] * y[(i + 1) % num_points] - x[(i + 1) % num_points] * y[i] for i in range(num_points)) / 2)

                break  

        if not lines:
            logger.info("Nenhuma polilinha encontrada no arquivo DXF.")
            return None, [], 0, 0, None, None

        for entity in msp.query('TEXT'):
            if "Az" in entity.dxf.text:
                ponto_az = (entity.dxf.insert.x, entity.dxf.insert.y, 0)
                logger.info(f"Ponto Az encontrado em texto: {ponto_az}")
        
        for entity in msp.query('INSERT'):
            if "Az" in entity.dxf.name:
                ponto_az = (entity.dxf.insert.x, entity.dxf.insert.y, 0)
                logger.info(f"Ponto Az encontrado no bloco: {ponto_az}")
        
        for entity in msp.query('POINT'):
            ponto_az = (entity.dxf.location.x, entity.dxf.location.y, 0)
            logger.info(f"Ponto Az encontrado como ponto: {ponto_az}")
        

        # if not ponto_az:
        #     logger.info("Ponto Az n√£o encontrado no arquivo DXF.")
        #     return None, lines, 0, 0, None, None

        logger.info(f"Linhas processadas: {len(lines)}")
        logger.info(f"Per√≠metro do DXF: {perimeter_dxf:.2f} metros")
        logger.info(f"√Årea do DXF: {area_dxf:.2f} metros quadrados")

        return doc, lines, perimeter_dxf, area_dxf, ponto_az, area_poligonal

    except Exception as e:
        logger.error(f"Erro ao obter informa√ß√µes do documento: {e}")
        return None, [], 0, 0, None, None
    
def obter_ponto_amarracao_anterior_v1(planilha_aberta_path):
    """
    Retorna o ponto imediatamente anterior ao V1 a partir da planilha de sa√≠da da poligonal aberta.
    Adaptado para colunas: 'Ponto', 'Coord_E', 'Coord_N'.
    """
    df = pd.read_excel(planilha_aberta_path, engine='openpyxl')

    if "Ponto" not in df.columns or "Coord_E" not in df.columns or "Coord_N" not in df.columns:
        raise ValueError("Planilha ABERTA n√£o cont√©m colunas 'Ponto', 'Coord_E' e 'Coord_N'.")

    idx_v1 = df[df["Ponto"] == "V1"].index
    if len(idx_v1) == 0:
        raise ValueError("Ponto V1 n√£o encontrado na planilha.")
    elif idx_v1[0] == 0:
        raise ValueError("N√£o existe ponto anterior ao V1.")

    linha = df.iloc[idx_v1[0] - 1]
    e = float(str(linha["Coord_E"]).replace(",", "."))
    n = float(str(linha["Coord_N"]).replace(",", "."))
    codigo = linha["Ponto"]

    return (e, n), codigo


    
# üîπ Fun√ß√£o para definir a fonte padr√£o
def set_default_font(doc):
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Arial'
    font.size = Pt(12)
    
def calculate_point_on_line(start, end, distance):
    """
    Calcula um ponto a uma determinada dist√¢ncia sobre uma linha.
    """
    dx, dy = end[0] - start[0], end[1] - start[1]
    length = math.hypot(dx, dy)
    return (
        start[0] + dx / length * distance,
        start[1] + dy / length * distance
    )

def add_azimuth_arc_to_dxf(msp, ponto_az, v1, azimute):
    """
    Adiciona o arco do azimute ao DXF usando ezdxf.
    """
    try:
        logger.info(f"Iniciando a adi√ß√£o do arco de azimute. Azimute: {azimute}¬∞")

        # Criar camada 'Azimute', se n√£o existir
        if 'Azimute' not in msp.doc.layers:
            msp.doc.layers.new(name='Azimute', dxfattribs={'color': 1})
            logger.info("Camada 'Azimute' criada com sucesso.")

        # Tra√ßar segmento entre Az e V1
        msp.add_line(start=ponto_az, end=v1, dxfattribs={'layer': 'Azimute'})
        logger.info(f"Segmento entre Az e V1 desenhado de {ponto_az} para {v1}")

        # Tra√ßar segmento para o norte
        north_point = (ponto_az[0], ponto_az[1] + 2)
        msp.add_line(start=ponto_az, end=north_point, dxfattribs={'layer': 'Azimute'})
        logger.info(f"Linha para o norte desenhada com sucesso de {ponto_az} para {north_point}")

        # Calcular o ponto inicial (1 metro de Az para V1)
        # Calcular dist√¢ncia entre ponto Az e V1 para definir raio adaptativo
        dist = calculate_distance(ponto_az, v1)
        radius = 0.4 if dist <= 0.5 else 1.0

        # Calcular os pontos do arco com esse raio
        start_arc = calculate_point_on_line(ponto_az, v1, radius)
        end_arc = calculate_point_on_line(ponto_az, north_point, radius)

        # Tra√ßar o arco do azimute
        msp.add_arc(
            center=ponto_az,
            radius=radius,
            start_angle=math.degrees(math.atan2(start_arc[1] - ponto_az[1], start_arc[0] - ponto_az[0])),
            end_angle=math.degrees(math.atan2(end_arc[1] - ponto_az[1], end_arc[0] - ponto_az[0])),
            dxfattribs={'layer': 'Azimute'}
        )
        logger.info(f"Arco do azimute desenhado com sucesso com valor de {azimute}¬∞ no ponto {ponto_az}")

       # Adicionar r√≥tulo do azimute diretamente com o texto "Azimute:"
        azimuth_label = f"Azimute: {convert_to_dms(azimute)}"  # Incluir o prefixo "Azimute:"

        # Calcular a posi√ß√£o do r√≥tulo
        label_position = (
            ponto_az[0] + 1.0 * math.cos(math.radians(azimute / 2)),
            ponto_az[1] + 1.0 * math.sin(math.radians(azimute / 2))
        )

        # Adicionar o texto ao desenho
        msp.add_text(
            azimuth_label,
            dxfattribs={
                'height': 0.25,
                'layer': 'Azimute',
                'insert': label_position  # Define a posi√ß√£o diretamente
            }
        )

        logger.info(f"R√≥tulo do azimute adicionado com sucesso: '{azimuth_label}' em {label_position}")


    except Exception as e:
        logger.error(f"Erro na fun√ß√£o `add_azimuth_arc_to_dxf`: {e}")

def calculate_polygon_area(points):
    """
    Calcula a √°rea de uma poligonal fechada utilizando o m√©todo do produto cruzado com alta precis√£o.
    :param points: Lista de coordenadas [(x1, y1), (x2, y2), ...].
    :return: √Årea da poligonal.
    """
    n = len(points)
    if n < 3:
        return Decimal(0)  # N√£o √© uma poligonal v√°lida

    area = Decimal(0)
    for i in range(n):
        x1, y1 = Decimal(points[i][0]), Decimal(points[i][1])
        x2, y2 = Decimal(points[(i + 1) % n][0]), Decimal(points[(i + 1) % n][1])
        area += x1 * y2 - y1 * x2

    return abs(area) / 2
    
def convert_to_dms(decimal_degrees):
    """
    Converte graus decimais para o formato graus, minutos e segundos (DMS).
    """
    try:
        # Verificar se o valor √© NaN
        if math.isnan(decimal_degrees):
            raise ValueError("Valor de entrada √© NaN")

        degrees = int(decimal_degrees)
        minutes = int((abs(decimal_degrees) - abs(degrees)) * 60)
        seconds = round((abs(decimal_degrees) - abs(degrees) - minutes / 60) * 3600, 2)
        return f"{degrees}¬∞{minutes}'{seconds}\""
    except Exception as e:
        logger.info(f"Erro na convers√£o para DMS: {e}")
        return "0¬∞0'0.00\""  # Valor padr√£o em caso de erro

def calculate_distance(p1, p2):
    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)


def degrees_to_dms(angle):
    """
    Converte um √¢ngulo em graus decimais para o formato graus, minutos e segundos (¬∞ ' ").
    """
    degrees = int(angle)
    minutes = int((angle - degrees) * 60)
    seconds = round((angle - degrees - minutes / 60) * 3600, 2)
    return f"{degrees}¬∞{minutes}'{seconds}\""
import math

def calculate_azimuth(p1, p2):
    """
    Calcula o azimute entre dois pontos p1 e p2.
    
    :param p1: Coordenadas do ponto 1 (E, N)
    :param p2: Coordenadas do ponto 2 (E, N)
    :return: Azimute em graus decimais
    """
    delta_x = p2[0] - p1[0]
    delta_y = p2[1] - p1[1]
    
    azimuth = math.degrees(math.atan2(delta_x, delta_y)) % 360  # Garantir valor entre 0¬∞ e 360¬∞
    
    return azimuth


def create_arrow_block(doc, block_name="ARROW"):
    """
    Cria um bloco no DXF representando uma seta s√≥lida como um tri√¢ngulo.
    """
    if block_name in doc.blocks:
        return  # O bloco j√° existe

    block = doc.blocks.new(name=block_name)

    # Definir o tri√¢ngulo da seta
    length = 0.5  # Comprimento da seta
    base_half_length = length / 2

    tip = (0, 0)  # Ponta da seta no eixo de coordenadas
    base1 = (-base_half_length, -length)
    base2 = (base_half_length, -length)

    block.add_solid([base1, base2, tip])
import math

def add_giro_angular_arc_to_dxf(doc_dxf, v1, az, v2):

    """
    Adiciona um arco representando o giro angular hor√°rio no espa√ßo de modelo do DXF j√° aberto.
    """
    try:
        msp = doc_dxf.modelspace()
        # Calcular dist√¢ncia entre V1‚ÄìAz e V1‚ÄìV2 para escolher o menor
        dist_az = calculate_distance(v1, az)
        dist_v2 = calculate_distance(v1, v2)
        min_dist = min(dist_az, dist_v2)

        radius = 0.4 if min_dist <= 0.5 else 1.0  # Raio adaptativo
        # Tra√ßar a reta entre V1 e Az
        msp.add_line(start=v1[:2], end=az[:2])
        logger.info(f"Linha entre V1 e Az tra√ßada com sucesso.")

        # Definir os pontos de apoio
        def calculate_displacement(point1, point2, distance):
            dx = point2[0] - point1[0]
            dy = point2[1] - point1[1]
            magnitude = math.hypot(dx, dy)
            return (
                point1[0] + (dx / magnitude) * distance,
                point1[1] + (dy / magnitude) * distance,
            )

        # Calcular os pontos de apoio
        ponto_inicial = calculate_displacement(v1, v2, radius)  # 2m na reta V1-V2
        ponto_final = calculate_displacement(v1, az, radius)   # 2m na reta V1-Az

        # Calcular os √¢ngulos dos vetores
        angle_v2 = math.degrees(math.atan2(ponto_inicial[1] - v1[1], ponto_inicial[0] - v1[0]))
        angle_az = math.degrees(math.atan2(ponto_final[1] - v1[1], ponto_final[0] - v1[0]))

        # Calcular o giro angular no sentido hor√°rio
        giro_angular = (angle_az - angle_v2) % 360  # Garantir que o √¢ngulo esteja no intervalo [0, 360)
        if giro_angular < 0:  # Caso negativo, ajustar para o sentido hor√°rio
            giro_angular += 360

        logger.info(f"Giro angular calculado corretamente: {giro_angular:.2f}¬∞")

        # Tra√ßar o arco
        msp.add_arc(center=v1[:2], radius=radius, start_angle=angle_v2, end_angle=angle_az)
        logger.info(f"Arco do giro angular tra√ßado com sucesso.")

        # Adicionar r√≥tulo ao arco
        label_offset = 3.0
        deslocamento_x=3
        deslocamento_y=-3
        angle_middle = math.radians((angle_v2 + angle_az) / 2)
        label_position = (
            v1[0] + (label_offset+deslocamento_x) * math.cos(angle_middle),
            v1[1] + (label_offset+deslocamento_y) * math.sin(angle_middle),
        )
        # Converter o √¢ngulo para DMS e exibir no r√≥tulo
        giro_angular_dms = f"{convert_to_dms(giro_angular)}"
        msp.add_text(
            giro_angular_dms,
            dxfattribs={
                'height': 0.3,
                'layer': 'Labels',
                'insert': label_position  # Define a posi√ß√£o do texto
            }
        )
        logger.info(f"R√≥tulo do giro angular ({giro_angular_dms}) adicionado com sucesso.")

    except Exception as e:
        logger.error(f"Erro ao adicionar o arco do giro angular ao DXF: {e}") 



def calculate_arc_angles(p1, p2, p3):
    try:
        # Vetores a partir de p2
        dx1, dy1 = p1[0] - p2[0], p1[1] - p2[1]  # Vetor de p2 para p1
        dx2, dy2 = p3[0] - p2[0], p3[1] - p2[1]  # Vetor de p2 para p3

        # √Çngulos dos vetores em rela√ß√£o ao eixo X
        angle1 = math.degrees(math.atan2(dy1, dx1)) % 360
        angle2 = math.degrees(math.atan2(dy2, dx2)) % 360

        # AQUI EST√Å A CORRE√á√ÉO:
        internal_angle = (angle1 - angle2) % 360

        if internal_angle > 180:
            #internal_angle = 360 - internal_angle
            internal_angle = internal_angle
            start_angle = angle1
            end_angle = angle2
        else:
            start_angle = angle2
            end_angle = angle1

        return start_angle % 360, end_angle % 360

    except Exception as e:
        logger.info(f"Erro ao calcular √¢ngulos do arco: {e}")
        return 0, 0





def insert_and_rotate_arrow(msp, center, radius, angle, rotation_adjustment, block_name="ARROW"):
    """
    Insere um bloco da seta alinhado ao arco e rotacionado conforme especificado.
    """
    arrow_tip_x = center[0] + radius * math.cos(angle)
    arrow_tip_y = center[1] + radius * math.sin(angle)
    arrow_tip = (arrow_tip_x, arrow_tip_y)

    rotation_angle = math.degrees(angle) + rotation_adjustment

    msp.add_blockref(
        block_name,
        insert=arrow_tip,
        dxfattribs={"rotation": rotation_angle}
    )
import math





def add_angle_visualization_to_dwg(msp, ordered_points, angulos_excel):
    """
    Adiciona √¢ngulos internos no espa√ßo de modelo do DXF usando diretamente os √¢ngulos calculados do Excel.
    """
    try:
        total_points = len(ordered_points)
        
        for i, p2 in enumerate(ordered_points):
            if i == 0:
                logger.info("‚è© Ignorando arco e r√≥tulo para V1")
                continue
            p1 = ordered_points[i - 1] if i > 0 else ordered_points[-1]
            p3 = ordered_points[(i + 1) % total_points]

            def calculate_displacement(base_point, direction_point, distance):
                dx = direction_point[0] - base_point[0]
                dy = direction_point[1] - base_point[1]
                magnitude = math.hypot(dx, dy)
                return (
                    base_point[0] + (dx / magnitude) * distance,
                    base_point[1] + (dy / magnitude) * distance,
                )

            # üîÅ Raio adaptativo com base na dist√¢ncia entre v√©rtices adjacentes
            dist_lado = math.hypot(p3[0] - p2[0], p3[1] - p2[1])
            # üîÅ Raio adaptativo com base na dist√¢ncia entre v√©rtices adjacentes
            dist_lado = math.hypot(p3[0] - p2[0], p3[1] - p2[1])

            # üîÅ Raio adaptativo com base na menor dist√¢ncia entre os dois lados que chegam ao v√©rtice
            lado_antes = math.hypot(p2[0] - p1[0], p2[1] - p1[1])
            lado_depois = math.hypot(p3[0] - p2[0], p3[1] - p2[1])
            lado_menor = min(lado_antes, lado_depois)

            if lado_menor <= 0.5:
                radius = lado_menor * 0.8  # proporcional ao menor lado
            else:
                radius = 1.0


            ponto_inicial = calculate_displacement(p2, p3, radius)
            ponto_final = calculate_displacement(p2, p1, radius)

            start_angle = math.degrees(math.atan2(ponto_inicial[1] - p2[1], ponto_inicial[0] - p2[0]))
            end_angle = math.degrees(math.atan2(ponto_final[1] - p2[1], ponto_final[0] - p2[0]))

            # Garantir que o arco desenhe no sentido correto
            if end_angle < start_angle:
                end_angle += 360
            logger.info(f"--- V{i+1} ---")
            logger.info(f"√Çngulo Excel: {repr(angulos_excel[i])}")
            logger.info(f"Raio: {radius:.2f}")
            logger.info(f"Start angle: {start_angle:.2f}¬∞, End angle: {end_angle:.2f}¬∞")

            try:
                # Adicionar o arco interno ao desenho
                msp.add_arc(
                    center=p2,
                    radius=radius,
                    start_angle=start_angle,
                    end_angle=end_angle,
                    dxfattribs={'layer': 'Internal_Arcs'}
                )

                # Agora, usa diretamente o √¢ngulo do Excel (sem recalcular!)
                internal_angle_dms = angulos_excel[i]

                # Adicionar r√≥tulo do √¢ngulo interno
                label_offset = 1
                label_position = (
                    p2[0] + label_offset * math.cos(math.radians((start_angle + end_angle) / 2)),
                    p2[1] + label_offset * math.sin(math.radians((start_angle + end_angle) / 2))
                )

                msp.add_text(
                    internal_angle_dms,
                    dxfattribs={
                        'height': 0.3,
                        'layer': 'Labels',
                        'insert': label_position
                    }
                )
            except Exception as e:
                logger.error(f"Erro ao adicionar arco ou r√≥tulo no v√©rtice V{i+1}: {e}")

            logger.info(f"V√©rtice V{i+1}: √Çngulo interno {internal_angle_dms}")

    except Exception as e:
        logger.error(f"Erro ao adicionar √¢ngulos internos ao DXF: {e}")




def calculate_internal_angle(p1, p2, p3):
    try:
        dx1, dy1 = p1[0] - p2[0], p1[1] - p2[1]
        dx2, dy2 = p3[0] - p2[0], p3[1] - p2[1]

        angle1 = math.atan2(dy1, dx1)
        angle2 = math.atan2(dy2, dx2)

        internal_angle = math.degrees(angle2 - angle1) % 360
        return internal_angle

    except Exception as e:
        logger.info(f"Erro inesperado ao calcular o √¢ngulo interno: {e}")
        return 0



def calculate_label_position(p2, start_angle, end_angle, radius=1.8):
    """
    Calcula a posi√ß√£o do r√≥tulo do √¢ngulo interno, deslocando-o para uma posi√ß√£o central no arco.
    
    :param p2: Ponto central do arco (v√©rtice da poligonal)
    :param start_angle: √Çngulo de in√≠cio do arco
    :param end_angle: √Çngulo de fim do arco
    :param radius: Raio do deslocamento para evitar sobreposi√ß√£o
    :return: Posi√ß√£o (x, y) onde o r√≥tulo do √¢ngulo interno ser√° colocado
    """
    try:
        # Calcular o √¢ngulo m√©dio entre os dois √¢ngulos do arco
        mid_angle = math.radians((start_angle + end_angle) / 2)

        # Calcular a posi√ß√£o do r√≥tulo deslocado no √¢ngulo m√©dio
        label_x = p2[0] + radius * math.cos(mid_angle)
        label_y = p2[1] + radius * math.sin(mid_angle)

        return (label_x, label_y)

    except Exception as e:
        logger.info(f"Erro ao calcular posi√ß√£o do r√≥tulo do √¢ngulo: {e}")
        return p2  # Retorna o pr√≥prio ponto central caso ocorra erro


import math

def add_label_and_distance(msp, start_point, end_point, label, distance):
    """
    Adiciona r√≥tulos e dist√¢ncias no espa√ßo de modelo usando ezdxf.
    """
    try:
        # Calcular ponto m√©dio
        mid_point = (
            (start_point[0] + end_point[0]) / 2,
            (start_point[1] + end_point[1]) / 2
        )

        # Vetor da linha
        dx = end_point[0] - start_point[0]
        dy = end_point[1] - start_point[1]
        length = math.hypot(dx, dy)

        # √Çngulo da linha
        angle = math.degrees(math.atan2(dy, dx))

        # Corrigir para manter a leitura sempre da esquerda para a direita
        if angle < -90 or angle > 90:
            angle += 180  

        # Afastar o r√≥tulo da linha
        offset = -0.5  # Ajuste o valor para mais afastamento
        perp_x = -dy / length * offset
        perp_y = dx / length * offset
        displaced_mid_point = (mid_point[0] + perp_x, mid_point[1] + perp_y)

        # Criar layer se n√£o existir
        if "Distance_Labels" not in msp.doc.layers:
            msp.doc.layers.new(name="Distance_Labels", dxfattribs={"color": 2})  # Define cor para melhor visualiza√ß√£o

        # Adicionar o r√≥tulo da dist√¢ncia no LAYER correto
        msp.add_text(
            f"{distance:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") + "",
            dxfattribs={
                "height": 0.3,
                "layer": "Distance_Labels",  # Novo LAYER
                "rotation": angle,
                "insert": displaced_mid_point
            }
        )
        logger.info(f"Dist√¢ncia {distance:.2f} m adicionada corretamente em {displaced_mid_point}")

    except Exception as e:
        logger.error(f"Erro ao adicionar r√≥tulo de dist√¢ncia: {e}")

def calculate_angular_turn(p1, p2, p3):
    """
    Calcula o giro angular no ponto `p2` entre os segmentos `p1-p2` e `p2-p3` no sentido hor√°rio.
    Retorna o √¢ngulo em graus.
    """
    import math
    
    dx1, dy1 = p1[0] - p2[0], p1[1] - p2[1]  # Vetor do segmento p1-p2
    dx2, dy2 = p3[0] - p2[0], p3[1] - p2[1]  # Vetor do segmento p2-p3

    angle1 = math.atan2(dy1, dx1)
    angle2 = math.atan2(dy2, dx2)

    # Calcula o √¢ngulo hor√°rio
    angular_turn = (angle2 - angle1) % (2 * math.pi)
    angular_turn_degrees = math.degrees(angular_turn)

    return angular_turn_degrees




def create_memorial_descritivo(
        uuid_str, doc, lines, proprietario, matricula, caminho_salvar, confrontantes, ponto_amarracao,
        dxf_file_path, area_dxf, azimute, v1, msp, dxf_filename, excel_file_path, tipo,
        giro_angular_v1_dms, sentido_poligonal='horario',
        diretorio_concluido=None
    ):
    """
    Cria o memorial descritivo e atualiza o DXF com base no ponto de amarra√ß√£o real (anterior ao V1).
    """

    if diretorio_concluido is None:
        diretorio_concluido = caminho_salvar

    if not lines:
        logger.info("Nenhuma linha dispon√≠vel para criar o memorial descritivo.")
        return None

    dxf_file_path = dxf_file_path.strip('"')
    dxf_output_path = os.path.join(
        diretorio_concluido,
        f"{uuid_str}_FECHADA_{tipo}_{matricula}.dxf"
    )

    logger.info(f"‚úÖ DXF FECHADA salvo corretamente: {dxf_output_path}")

    try:
        doc_dxf = ezdxf.readfile(dxf_file_path)
        msp = doc_dxf.modelspace()
    except Exception as e:
        logger.error(f"Erro ao abrir o arquivo DXF para edi√ß√£o: {e}")
        return None

    ordered_points = [line[0] for line in lines]
    if ordered_points[-1] != lines[-1][1]:
        ordered_points.append(lines[-1][1])

    ordered_points = ensure_counterclockwise(ordered_points)
    area = calcular_area_poligonal(ordered_points)
    # Agora inverter o sentido corretamente, incluindo tratamento dos arcos (bulge)
    if sentido_poligonal == 'horario':
        if area > 0:
            ordered_points.reverse()
            area = abs(area)
            # Inverte o sentido dos arcos (bulges), se existirem
            for ponto in ordered_points:
                if 'bulge' in ponto and ponto['bulge'] != 0:
                    ponto['bulge'] *= -1
            logger.info(f"√Årea da poligonal invertida para sentido hor√°rio com ajuste dos arcos: {area:.4f} m¬≤")
        else:
            logger.info(f"√Årea da poligonal j√° no sentido hor√°rio: {abs(area):.4f} m¬≤")

    else:  # sentido_poligonal == 'anti_horario'
        if area < 0:
            ordered_points.reverse()
            area = abs(area)
            # Inverte o sentido dos arcos (bulges), se existirem
            for ponto in ordered_points:
                if 'bulge' in ponto and ponto['bulge'] != 0:
                    ponto['bulge'] *= -1
            logger.info(f"√Årea da poligonal invertida para sentido anti-hor√°rio com ajuste dos arcos: {area:.4f} m¬≤")
        else:
            logger.info(f"√Årea da poligonal j√° no sentido anti-hor√°rio: {abs(area):.4f} m¬≤")


    # C√°lculo de dist√¢ncia V1‚ÄìPonto de Amarra√ß√£o
    distance_amarracao_v1 = calculate_distance(ponto_amarracao, ordered_points[0])

    # Corrigir fechamento duplicado
    tolerancia = 0.001
    if math.isclose(ordered_points[0][0], ordered_points[-1][0], abs_tol=tolerancia) and \
       math.isclose(ordered_points[0][1], ordered_points[-1][1], abs_tol=tolerancia):
        ordered_points.pop()

    try:
        data = []
        total_pontos = len(ordered_points)

        for i in range(total_pontos):
            p1 = ordered_points[i - 1] if i > 0 else ordered_points[-1]
            p2 = ordered_points[i]
            p3 = ordered_points[(i + 1) % total_pontos]

            internal_angle = 360 - calculate_internal_angle(p1, p2, p3)
            internal_angle_dms = convert_to_dms(internal_angle)

            description = f"V{i + 1}_V{(i + 2) if i + 1 < total_pontos else 1}"
            dx = p3[0] - p2[0]
            dy = p3[1] - p2[1]
            distance = math.hypot(dx, dy)
            confrontante = confrontantes[i % len(confrontantes)]

            data.append({
                "V": f"V{i + 1}",
                "E": f"{p2[0]:,.3f}".replace(",", "").replace(".", ","),
                "N": f"{p2[1]:,.3f}".replace(",", "").replace(".", ","),
                "Z": "0,000",
                "Divisa": description,
                "Angulo Interno": internal_angle_dms,
                "Distancia(m)": f"{distance:,.2f}".replace(",", "").replace(".", ","),
                "Confrontante": confrontante
            })

            if distance > 0.01:
                add_label_and_distance(msp, p2, p3, f"V{i + 1}", distance)

        df = pd.DataFrame(data)
        # Criar nova coluna 'GIRO_ANGULAR_V1_P2_V2' e preencher apenas para V1
        giro_coluna = []
        for i, row in df.iterrows():
            if str(row["V"]).strip().upper() == "V1":
                giro_coluna.append(giro_angular_v1_dms)
            else:
                giro_coluna.append("")

        df["GIRO_ANGULAR_V1_P2_V2"] = giro_coluna

        df.to_excel(excel_file_path, index=False)

        # Formatar Excel
        wb = openpyxl.load_workbook(excel_file_path)
        ws = wb.active
        for cell in ws[1]:
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal="center", vertical="center")

        col_widths = {
            "A": 8, "B": 15, "C": 15, "D": 0, "E": 15,
            "F": 15, "G": 15, "H": 55,"I": 30
        }
        for col, width in col_widths.items():
            ws.column_dimensions[col].width = width

        for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
            for cell in row:
                cell.alignment = Alignment(horizontal="center", vertical="center")
        wb.save(excel_file_path)
        logger.info(f"Arquivo Excel salvo em: {excel_file_path}")

        # ‚úÖ Desenhar o GIRO ANGULAR com base no ponto real
        try:
            v2 = ordered_points[1]
            add_giro_angular_arc_to_dxf(doc_dxf, v1, ponto_amarracao, v2)
            logger.info("Giro angular adicionado ao DXF com base no ponto de amarra√ß√£o.")
        except Exception as e:
            logger.error(f"Erro ao adicionar giro angular: {e}")

        # üî¥ Adicionar v√©rtices no DXF
        if "Vertices" not in msp.doc.layers:
            msp.doc.layers.add("Vertices", dxfattribs={"color": 1})

        for i, vertex in enumerate(ordered_points):
            msp.add_circle(center=vertex, radius=0.5, dxfattribs={"layer": "Vertices"})
            label_offset = 0.3
            label_position = (vertex[0] + label_offset, vertex[1] + label_offset)
            msp.add_text(
                f"V{i + 1}",
                dxfattribs={"height": 0.3, "layer": "Vertices", "insert": label_position}
            )
        logger.info("V√©rtices adicionados ao DXF.")

        # ‚ûï Adicionar √¢ngulos internos ao DXF
        try:
            angulos_excel = [item["Angulo Interno"] for item in data]

            if "Labels" not in msp.doc.layers:
                msp.doc.layers.add("Labels", dxfattribs={"color": 5})

            add_angle_visualization_to_dwg(msp, ordered_points, angulos_excel)
            logger.info("√Çngulos internos adicionados ao DXF com sucesso.")
        except Exception as e:
            logger.info(f"Erro ao adicionar √¢ngulos internos ao DXF: {e}")

        
        # üíæ Salvar DXF final
        doc_dxf.saveas(dxf_output_path)
        logger.info(f"Arquivo DXF atualizado salvo em: {dxf_output_path}")

    except Exception as e:
        logger.error(f"Erro ao gerar o memorial descritivo: {e}")
        return None

    return excel_file_path







def generate_initial_text(proprietario, matricula, descricao, area, perimeter, rua, cidade, ponto_amarracao, azimute, distancia):
    """
    Gera o texto inicial do memorial descritivo.
    """
    initial_text = (
        f"MEMORIAL DESCRITIVO\n"
        f"NOME PROPRIET√ÅRIO / OCUPANTE: {proprietario}\n"
        f"DESCRI√á√ÉO: {descricao}\n"
        f"DOCUMENTA√á√ÉO: MATR√çCULA {matricula}\n"
        f"√ÅREA DO IM√ìVEL: {area:.2f} metros quadrados\n"
        f"PER√çMETRO: {perimeter:.4f} metros\n"
        f"√Årea localizada na rua {rua}, munic√≠pio de {cidade}, com a seguinte descri√ß√£o:\n"
        f"O Ponto Az est√° localizado nas coordenadas E {ponto_amarracao[0]:.3f}, N {ponto_amarracao[1]:.3f}.\n"
        f"Da√≠, com Azimute de {azimute} e dist√¢ncia de {distancia:.2f} metros, chega-se ao V√©rtice V1, "
        f"origem da √°rea descri√ß√£o, alinhado com a rua {rua}."
    )
    return initial_text


def generate_angular_text(az_v1, v1_v2, distancia, angulo, rua, confrontante):
    """
    Gera o texto do √¢ngulo em V1 entre Az-V1 e V1-V2.
    """
    angular_text = (
        f"Da√≠, visando o Ponto ‚ÄúAz‚Äù, com giro angular hor√°rio de {angulo} e diste {distancia:.2f} metros, "
        f"chega-se ao V√©rtice V2, tamb√©m alinhado com a rua {rua} e lim√≠trofe com {confrontante}."
    )
    return angular_text


def generate_recurring_text(df, rua, confrontantes):
    """
    Gera o texto recorrente enquanto percorre os v√©rtices da poligonal.
    """
    recurring_texts = []
    num_vertices = len(df)
    
    for i in range(1, num_vertices - 1):  # De V2 at√© o pen√∫ltimo v√©rtice
        current = df.iloc[i]
        next_vertex = df.iloc[i + 1]
        confrontante = confrontantes[i % len(confrontantes)]
        
        recurring_text = (
            f"Da√≠, visando o V√©rtice {current['V']}, com giro angular hor√°rio de {current['Angulo Interno']} "
            f"e diste {current['Distancia(m)']} metros, chega-se ao V√©rtice {next_vertex['V']}, "
            f"tamb√©m alinhado √† rua {rua} e lim√≠trofe com {confrontante}."
        )
        recurring_texts.append(recurring_text)
    
    return recurring_texts


def generate_final_text(df, rua, confrontantes):
    """
    Gera o texto final ao retornar ao V1.
    """
    last_vertex = df.iloc[-1]
    first_vertex = df.iloc[0]
    confrontante = confrontantes[-1 % len(confrontantes)]  # Confrontante do √∫ltimo trecho
    
    final_text = (
        f"Da√≠, visando o v√©rtice {last_vertex['V']}, com giro angular de {last_vertex['Angulo Interno']} "
        f"e diste {last_vertex['Distancia(m)']} metros, chega-se ao v√©rtice {first_vertex['V']}, "
        f"origem da presente descri√ß√£o, no alinhamento da rua {rua} e pr√≥ximo aos lotes de {confrontante}."
    )
    return final_text


def create_memorial_document(
    uuid_str,
    proprietario,
    matricula,
    matricula_texto,
    area_total,
    cpf,
    rgi,
    excel_file_path,
    template_path,
    output_path,
    assinatura_path,
    ponto_amarracao,
    azimute,
    distancia_amarracao_v1,
    rua,
    cidade,
    confrontantes,
    area_dxf,
    desc_ponto_amarracao,
    perimeter_dxf,
    giro_angular_v1_dms
):

    try:
        # Ler a planilha gerada
        df = pd.read_excel(excel_file_path, engine='openpyxl', dtype=str)
        logger.info("AREA_TOTAL_DENTRO_DOCUMENT:", area_total)

        # Corrigir v√≠rgulas em valores num√©ricos
        df['Distancia(m)'] = df['Distancia(m)'].str.replace(',', '.').astype(float)
        df['E'] = df['E'].str.replace(',', '').astype(float)
        df['N'] = df['N'].str.replace(',', '').astype(float)

        # Calcular per√≠metro e √°rea se necess√°rio
        perimeter = df['Distancia(m)'].sum()
        x = df['E'].values
        y = df['N'].values
        area = abs(sum(x[i] * y[(i + 1) % len(x)] - x[(i + 1) % len(x)] * y[i] for i in range(len(x))) / 2)

        # Criar documento Word
        doc_word = Document(template_path)
        # üî¥ Remove par√°grafos vazios iniciais (inclusive espa√ßos e quebras invis√≠veis)
        while doc_word.paragraphs and not doc_word.paragraphs[0].text.strip():
            p_element = doc_word.paragraphs[0]._element
            p_element.getparent().remove(p_element)
        
        set_default_font(doc_word)

        v1 = (df.iloc[0]['E'], df.iloc[0]['N'])

        # Converter para formatos amig√°veis
        area_dxf_formatada = f"{area_dxf:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        ponto_amarracao_1 = f"{ponto_amarracao[0]:.3f}".replace(".", ",")
        ponto_amarracao_2 = f"{ponto_amarracao[1]:.3f}".replace(".", ",")
        distancia_str = f"{distancia_amarracao_v1:.2f}".replace(".", ",")
        azimute_dms = convert_to_dms(azimute)


        
        
        # üî¥ Remove par√°grafos indesejados como o Copilot
        for para in doc_word.paragraphs:
            if "copilot" in para.text.lower():
                p_element = para._element
                p_element.getparent().remove(p_element)

        # ‚¨áÔ∏è Agora insere o t√≠tulo sem espa√ßamento extra
        p = doc_word.add_paragraph(style='Normal')
        p.paragraph_format.space_before = Pt(0)
        p.paragraph_format.space_after = Pt(0)
        p.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        p.add_run("MEMORIAL DESCRITIVO").bold = True
                
        
        doc_word.add_paragraph()  # Par√°grafo vazio para pular uma linha
        p = doc_word.add_paragraph(style='Normal')
        p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        p.add_run("Objetivo: ").bold = True
        p.add_run(f"√Årea destinada √† servid√£o de passagem para execu√ß√£o de coletor de fundo pertencente √† rede coletora de esgoto de {cidade}/RS.")


        p = doc_word.add_paragraph(style='Normal')
        p.add_run("Matr√≠cula N√∫mero: ").bold = True
        p.add_run(f"{matricula_texto} - {rgi}")

        area_total_formatada = str(area_total).replace(".", ",")
        p = doc_word.add_paragraph(style='Normal')
        p.add_run("√Årea Total do Terreno: ").bold = True
        p.add_run(area_total_formatada)



        p = doc_word.add_paragraph(style='Normal')
        p.add_run("Propriet√°rio: ").bold = True
        p.add_run(f"{proprietario} - CPF/CNPJ: {cpf}")


        p = doc_word.add_paragraph(style='Normal')
        p.add_run("√Årea de Servid√£o de Passagem: ").bold = True
        run1 = p.add_run(f"{area_dxf_formatada} m"); run1.font.name = 'Arial'; run1.font.size = Pt(12)
        run2 = p.add_run("2"); run2.font.name = 'Arial'; run2.font.size = Pt(12); run2.font.superscript = True


        

        doc_word.add_paragraph()  # Par√°grafo vazio para pular uma linha
        p = doc_word.add_paragraph(style='Normal')
        p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        #p.add_run("Descri√ß√£o: ").bold = True
        p.add_run("√Årea com ").font.name = 'Arial'

        run1 = p.add_run(f"{area_dxf_formatada} m")
        run1.font.name = 'Arial'
        run1.font.size = Pt(12)

        run2 = p.add_run("2")
        run2.font.name = 'Arial'
        run2.font.size = Pt(12)
        run2.font.superscript = True

        p.add_run(f" localizada na {rua}, munic√≠pio de {cidade}, com a finalidade de servid√£o de passagem com a seguinte descri√ß√£o e confronta√ß√µes, onde os √¢ngulos foram medidos no sentido hor√°rio.").font.name = 'Arial'








        # üîµ Texto opcional com o ponto de amarra√ß√£o real
        doc_word.add_paragraph()  # Par√°grafo vazio para pular uma linha
        doc_word.add_paragraph(
            f"Pontos definidos pelas Coordenadas Planas no Sistema U.T.M. ‚Äì SIRGAS 2000.",
            style='Normal'
        )
        #doc_word.add_paragraph(
        #    f"Da√≠, com azimute de {azimute_dms} e dist√¢ncia de {distancia_str} metros, chega-se ao V√©rtice V1, origem da √°rea descrita.",
        #    style='Normal'
        #)

        # Descri√ß√£o sequencial dos v√©rtices
        for i in range(len(df)):
            current = df.iloc[i]
            next_vertex = df.iloc[(i + 1) % len(df)]
            distancia = f"{current['Distancia(m)']:.2f}".replace(".", ",")
            confrontante = current['Confrontante']
            giro_angular = current['Angulo Interno']

            if i == 0:  # Primeira linha √© sempre V1
                p = doc_word.add_paragraph(style='Normal')
                p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
                p.add_run("Do v√©rtice ").bold = False
                p.add_run(f"{current['V']}").bold = True
                p.add_run(
                    f", com giro angular hor√°rio de {giro_angular_v1_dms} e dist√¢ncia de {distancia} metros, "
                    f"confrontando com √°rea pertencente √† {confrontante}, chega-se ao v√©rtice "
                )
                p.add_run(f"{next_vertex['V']}").bold = True
                p.add_run(";")
                doc_word.add_paragraph()

            elif next_vertex['V'] == "V1" and i == len(df) - 1:
                p = doc_word.add_paragraph(style='Normal')
                p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
                p.add_run("Do v√©rtice ").bold = False
                p.add_run(f"{current['V']}").bold = True
                p.add_run(
                    f", com giro angular hor√°rio de {giro_angular} e dist√¢ncia de {distancia} metros, "
                    f"confrontando com √°rea pertencente √† {confrontante}, chega-se ao v√©rtice "
                )
                p.add_run(f"{next_vertex['V']}").bold = True
                p.add_run(", origem da presente descri√ß√£o.")
                doc_word.add_paragraph()

            else:
                p = doc_word.add_paragraph(style='Normal')
                p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
                p.add_run("Do v√©rtice ").bold = False
                p.add_run(f"{current['V']}").bold = True
                p.add_run(
                    f", com giro angular hor√°rio de {giro_angular} e dist√¢ncia de {distancia} metros, "
                    f"confrontando com √°rea pertencente √† {confrontante}, chega-se ao v√©rtice "
                )
                p.add_run(f"{next_vertex['V']}").bold = True
                p.add_run(";")
                doc_word.add_paragraph()


        doc_word.add_paragraph()  # Par√°grafo vazio para pular uma linha
        p = doc_word.add_paragraph(style='Normal')
        p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
        p.add_run(f"Os angulos foram medidos no sentido hor√°rio.")


        # Rodap√©
        data_atual = datetime.now().strftime("%d de %B de %Y")

        # converte m√™s para portugu√™s
        for ingles, portugues in MESES_PT_BR.items():
            if ingles in data_atual:
                data_atual = data_atual.replace(ingles, portugues)
                break
        doc_word.add_paragraph(f"\nPorto Alegre, RS, {data_atual}.", style='Normal')
        doc_word.add_paragraph("\n\n")

        doc_word.save(output_path)
        logger.info(f"Memorial descritivo salvo em: {output_path}")

    except Exception as e:
        logger.error(f"Erro ao criar o documento memorial: {e}")




def find_excel_file(directory, keywords):
    """
    Busca um arquivo Excel no diret√≥rio contendo todas as palavras-chave no nome.
    Se n√£o encontrar, exibe a lista de arquivos dispon√≠veis.
    """
    if not directory or not os.path.exists(directory):
        logger.info(f"Erro: O diret√≥rio '{directory}' n√£o existe ou n√£o foi especificado corretamente.")
        return None

    excel_files = [file for file in os.listdir(directory) if file.endswith(".xlsx")]

    if not excel_files:
        logger.info(f"Nenhum arquivo Excel encontrado no diret√≥rio: {directory}")
        return None

    for file in excel_files:
        if all(keyword.lower() in file.lower() for keyword in keywords):
            return os.path.join(directory, file)

    # Se nenhum arquivo correspondente foi encontrado, listar os arquivos dispon√≠veis
    logger.info(f"Nenhum arquivo Excel contendo {keywords} foi encontrado em '{directory}'.")
    logger.info("Arquivos dispon√≠veis no diret√≥rio:")
    for f in excel_files:
        logger.info(f"  - {f}")

    return None



        
# def convert_docx_to_pdf(output_path, pdf_file_path):
#     """
#     Converte um arquivo DOCX para PDF usando a biblioteca comtypes.
#     """
#     try:
#         # Verificar se o arquivo DOCX existe antes de abrir
#         if not os.path.exists(output_path):
#             raise FileNotFoundError(f"Arquivo DOCX n√£o encontrado: {output_path}")
        
#         logger.info(f"Tentando converter o arquivo DOCX: {output_path} para PDF: {pdf_file_path}")

#         word = comtypes.client.CreateObject("Word.Application")
#         word.Visible = False  # Ocultar a interface do Word
#         doc = word.Documents.Open(output_path)
        
#         # Aguardar alguns segundos antes de salvar como PDF
#         import time
#         time.sleep(2)

#         doc.SaveAs(pdf_file_path, FileFormat=17)  # 17 corresponde ao formato PDF
#         doc.Close()
#         word.Quit()
#         logger.info(f"Arquivo PDF salvo com sucesso em: {pdf_file_path}")
#     except FileNotFoundError as fnf_error:
#         logger.error(f"Erro: {fnf_error}")
#     except Exception as e:
#         logger.info(f"Erro ao converter DOCX para PDF: {e}")
#     finally:
#         try:
#             word.Quit()
#         except:
#             pass  # Garantir que o Word seja fechado



def sanitize_filename(filename):
    return re.sub(r'[<>:"/\\|?*]', '', filename)

        
def main_poligonal_fechada(uuid_str, excel_path, dxf_path, diretorio_preparado, diretorio_concluido, caminho_template, sentido_poligonal='horario'):

    caminho_salvar = diretorio_concluido 
    template_path = caminho_template 
    # Carrega dados do im√≥vel
    dados_imovel_excel_path = excel_path
    dados_imovel_df = pd.read_excel(dados_imovel_excel_path, sheet_name='Dados_do_Im√≥vel', header=None)
    dados_imovel = dict(zip(dados_imovel_df.iloc[:, 0], dados_imovel_df.iloc[:, 1]))

    # Extrai informa√ß√µes
    proprietario = dados_imovel.get("NOME DO PROPRIET√ÅRIO", "").strip()
    cpf = dados_imovel.get("CPF/CNPJ", "").strip()
    matricula = sanitize_filename(str(dados_imovel.get("DOCUMENTA√á√ÉO DO IM√ìVEL", "")).strip())
    matricula_texto = str(dados_imovel.get("DOCUMENTA√á√ÉO DO IM√ìVEL", "")).strip()
    descricao = dados_imovel.get("OBRA", "").strip()
    area_total = dados_imovel.get("√ÅREA TOTAL DO TERRENO DOCUMENTADA", "").replace("\t", "").replace("\n", "").strip()
    cidade = dados_imovel.get("CIDADE", "").strip().capitalize()
    rgi= dados_imovel.get("RGI", "").strip().capitalize()
    rua = dados_imovel.get("LOCAL", "").strip()
    desc_ponto_Az = dados_imovel.get("AZ", "").strip()

    # Diret√≥rio para salvar resultados
    
    os.makedirs(caminho_salvar, exist_ok=True)

    # Identifica tipo (SER, REM, etc)
    dxf_filename = os.path.basename(dxf_path).upper()
    if "ETE" in dxf_filename:
        tipo = "ETE"
    elif "REM" in dxf_filename:
        tipo = "REM"
    elif "SER" in dxf_filename:
        tipo = "SER"
    elif "ACE" in dxf_filename:
        tipo = "ACE"
    else:
        logger.info("‚ùå N√£o foi poss√≠vel determinar automaticamente o tipo (ETE, REM, SER ou ACE).")
        return

    padrao_fechada = os.path.join(diretorio_preparado, f"{uuid_str}_FECHADA_{tipo}*.xlsx")

    arquivos_encontrados = glob.glob(padrao_fechada)
    if not arquivos_encontrados:
        logger.info(f"‚ùå Arquivo de confrontantes n√£o encontrado com o padr√£o: {padrao_fechada}")
        return
    confrontantes_df = pd.read_excel(arquivos_encontrados[0])
    confrontantes = confrontantes_df.iloc[:, 1].dropna().tolist()

    # DXF limpo
    # ‚ö†Ô∏è Substitui a limpeza anterior por apenas convers√£o R2010
    dxf_limpo_path = os.path.join(caminho_salvar, f"DXF_LIMPO_{matricula}.dxf")
    dxf_file_path = limpar_dxf_e_converter_r2010(dxf_path, dxf_limpo_path)


    # üîç Buscar planilha que COME√áA com ABERTA_{TIPO} no diret√≥rio CONCLUIDO
    padrao_aberta = os.path.join(diretorio_concluido, f"{uuid_str}_ABERTA_{tipo}*.xlsx")
    planilhas_aberta = glob.glob(padrao_aberta)

    if not planilhas_aberta:
        logger.info(f"‚ùå Nenhuma planilha encontrada come√ßando com 'ABERTA_{tipo}' no diret√≥rio: {diretorio_concluido}")
        return

    planilha_aberta_saida = planilhas_aberta[0]
    logger.info(f"üìÑ Planilha ABERTA localizada: {planilha_aberta_saida}")

   
    if not planilhas_aberta:
        logger.info(f"‚ùå Nenhuma planilha encontrada contendo 'ABERTA' e '{tipo}' no nome dentro de: {diretorio_concluido}")
        return

    planilha_aberta_saida = planilhas_aberta[0]
    logger.info(f"üìÑ Planilha ABERTA localizada: {planilha_aberta_saida}")


    # üìÅ Procurar CONCLUIDO dentro da cidade (REPESCAGEM_*/CONCLUIDO)
    # O diret√≥rio CONCLUIDO j√° √© passado corretamente
    diretorio_concluido_real = diretorio_concluido

   
    # üß≠ Obter ponto de amarra√ß√£o anterior ao V1
    try:
        ponto_amarracao, codigo_amarracao = obter_ponto_amarracao_anterior_v1(planilha_aberta_saida)
        logger.info(f"üìå Ponto de amarra√ß√£o identificado: {codigo_amarracao} com coordenadas {ponto_amarracao}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter ponto de amarra√ß√£o: {e}")
        return

    # üîç Extrair geometria do DXF
    doc, lines, perimeter_dxf, area_dxf, _, area_poligonal = get_document_info_from_dxf(dxf_file_path)
    if not doc or not ponto_amarracao:
        logger.info("Erro ao processar o arquivo DXF.")
        return

    try:
        doc_dxf = ezdxf.readfile(dxf_file_path)
        msp = doc_dxf.modelspace()
    except Exception as e:
        logger.error(f"Erro ao abrir o arquivo DXF para edi√ß√£o: {e}")
        return

    if doc and lines:
        logger.info(f"√Årea da poligonal obtida (do DXF): {area_dxf:.6f} m¬≤")
        logger.info(f"Per√≠metro da poligonal (do DXF): {perimeter_dxf:.6f} metros")

        # C√°lculo com base no ponto real
        v1 = lines[0][0]
        azimute = calculate_azimuth(ponto_amarracao, v1)
        # C√°lculo do giro angular no v√©rtice V1 (do ponto externo para dentro da poligonal)
        v2 = lines[1][0]  # V2 √© o segundo ponto da poligonal
        giro_angular_v1 = calculate_angular_turn(ponto_amarracao, v1, v2)
        giro_angular_v1_dms = convert_to_dms(360 - giro_angular_v1)

        distancia_az_v1 = calculate_distance(ponto_amarracao, v1)

        # Caminho do Excel de sa√≠da
        excel_file_path = os.path.join(
            diretorio_concluido,
            f"{uuid_str}_FECHADA_{tipo}_{matricula}.xlsx"
        )

        logger.info(f"‚úÖ Excel FECHADA salvo corretamente: {excel_file_path}")

        # üõ† Criar memorial e Excel
        create_memorial_descritivo(
            uuid_str, doc, lines, proprietario, matricula, caminho_salvar, confrontantes, ponto_amarracao,
            dxf_file_path, area_dxf, azimute, v1, msp, dxf_filename, excel_file_path, tipo,giro_angular_v1_dms, sentido_poligonal=sentido_poligonal
        )

        # üìÑ Gerar DOCX
        if excel_file_path:
            # template_path = os.path.join(BASE_DIR, "templates_doc", "Memorial_modelo_padrao.docx")
            output_path_docx = os.path.join(
                diretorio_concluido,
                f"{uuid_str}_FECHADA_{tipo}_{matricula}.docx"
            )

            logger.info(f"‚úÖ DOCX FECHADA salvo corretamente: {output_path_docx}")

            assinatura_path = r"C:\Users\Paulo\Documents\CASSINHA\MEMORIAIS DESCRITIVOS\Assinatura.jpg"

            desc_ponto_amarracao = f"ponto {codigo_amarracao}, obtido na planilha da poligonal aberta"

            create_memorial_document(
                uuid_str=uuid_str,
                proprietario=proprietario,
                matricula=matricula,  # usado para salvar arquivos
                matricula_texto=matricula_texto,  # usado no Word
                area_total=area_total,
                cpf=cpf,
                rgi=rgi,
                excel_file_path=excel_file_path,
                template_path=template_path,
                output_path=output_path_docx,
                assinatura_path=assinatura_path,
                ponto_amarracao=ponto_amarracao,
                azimute=azimute,
                distancia_amarracao_v1=distancia_az_v1,
                rua=rua,
                cidade=cidade,
                confrontantes=confrontantes,
                area_dxf=area_dxf,
                desc_ponto_amarracao=desc_ponto_amarracao,
                perimeter_dxf=perimeter_dxf,
                giro_angular_v1_dms=giro_angular_v1_dms,
               
            )




            # üßæ Converter para PDF
            # time.sleep(2)
            # if os.path.exists(output_path_docx):
            #     pdf_file_path = os.path.join(caminho_salvar, f"FECHADA_{tipo}_Memorial_{matricula}.pdf")
            #     convert_docx_to_pdf(output_path_docx, pdf_file_path)
            #     logger.info(f"Arquivo PDF salvo em: {pdf_file_path}")
            # else:
            #     logger.info(f"Erro: O arquivo DOCX '{output_path_docx}' n√£o foi encontrado.")
        else:
            logger.info("excel_file_path n√£o definido ou inv√°lido.")
        logger.info("Documento do AutoCAD fechado.")
    else:
        logger.info("Nenhuma linha foi encontrada ou n√£o foi poss√≠vel acessar o documento.")
        pythoncom.CoUninitialize()
    #atualizado agora





